- const getInputName = (f, property) => `${f.name}[${property}]`

mixin formFor(f, options = { class: '' })
  form(action=_.get(options, 'url') method=_.get(options, 'method', 'get') class=options['class'])
    block

mixin input(f, property, options = { as: 'text' })
  - const value = f.object[property] === undefined ? '' : f.object[property]
  .form-group(class=(f.errors[property] && 'has-danger'))
    label= property
    input(name=getInputName(f, property) class='form-control' type=options['as'] value=`${value}`)
    if f.errors[property]
      .form-control-feedback= f.errors[property].map(({ message }) => message).join('. ')

mixin select(f, property, list, options = { label: '', style: ''})
  - const value = f.object[property] === undefined ? 1 : f.object[property]
  .form-group(style=options.style)
    label(style=options.style)= options.label
    select(name=getInputName(f, property) class='form-control')
      each elem in f.object[list]
        if elem.id === value
          option(selected value=`${elem.id}`) #{elem.name}
        else
          option(value=`${elem.id}`) #{elem.name}

mixin filterSelect(name, list, options = { label: '', style: ''})
  .form-group(style=options.style)
    label(style=options.style)= options.label
    select(name= name class='form-control')
      option(disabled selected) Choose value
      each elem in list
        option(value=`${elem.id}`) #{elem.name}

mixin button(f, type = 'submit', options = { value: 'Save' })
  .form-group
    input(class='btn btn-primary-outline btn-outline-success' type=`${type}` value=options.value)
